import logging
import os
import asyncio
from avatar_generator import generate_avatar
from dotenv import load_dotenv
from telethon.sessions import StringSession
from telethon.errors import FloodWaitError
from telethon import TelegramClient, functions
from telethon.tl.functions.photos import GetUserPhotosRequest, DeletePhotosRequest, UploadProfilePhotoRequest
import argparse

load_dotenv()
api_id = int(os.getenv("TG_API_ID"))
api_hash = os.getenv("TG_API_HASH")
session_string = os.getenv("TG_SESSION")

bot_token = os.getenv("TG_BOT_TOKEN")

logging.basicConfig(level=logging.INFO, format='[%(asctime)s] %(levelname)s: %(message)s')
logger = logging.getLogger(__name__)

async def update_user_avatar():
    if not all([api_id, api_hash, session_string]):
        logger.error("–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö TG_API_ID, TG_API_HASH –∏–ª–∏ TG_SESSION.")
        return

    try:
        async with TelegramClient(
            StringSession(session_string),
            api_id,
            api_hash,
            device_model="Ubuntu 22.04",
            system_version="5.15.0",
            app_version="10.5.0",
            lang_code="en",
            system_lang_code="en-US"
        ) as client:

            if not await client.is_user_authorized():
                logger.error("–°–µ—Å—Å–∏—è –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞. –ù–µ –∑–∞–ø—É—Å–∫–∞–π start(), —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π StringSession –ª–æ–∫–∞–ª—å–Ω–æ.")
                return

            image_path = generate_avatar()
            file = await client.upload_file(image_path)

            await client(functions.photos.UploadProfilePhotoRequest(file=file))
            logger.info("‚úÖ –ù–æ–≤—ã–π –∞–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

            photos = await client(GetUserPhotosRequest('me', offset=0, max_id=0, limit=10))
            if photos.photos:
                to_delete = photos.photos[1:6]
                for p in to_delete:
                    try:
                        await client(DeletePhotosRequest([p.id]))
                        logger.info(f"üóë –£–¥–∞–ª—ë–Ω —Å—Ç–∞—Ä—ã–π –∞–≤–∞—Ç–∞—Ä: {p.id}")
                        await asyncio.sleep(5)
                    except FloodWaitError as e:
                        logger.warning(f"‚è≥ FloodWait: —Å–ø–∏–º {e.seconds} —Å–µ–∫.")
                        await asyncio.sleep(e.seconds)

    except FloodWaitError as e:
        logger.error(f"‚è≥ Global FloodWait: {e.seconds} —Å–µ–∫. –æ–∂–∏–¥–∞–Ω–∏—è.")
        await asyncio.sleep(e.seconds)
    except Exception as e:
        logger.exception("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:")

async def update_bot_avatar():
    if not all([api_id, api_hash, bot_token]):
        logger.error("–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö TG_API_ID, TG_API_HASH –∏–ª–∏ TG_BOT_TOKEN.")
        return
    try:
        client = TelegramClient('bot', api_id, api_hash)
        await client.start(bot_token=bot_token)
        async with client:
            image_path = generate_avatar()
            file = await client.upload_file(image_path)
            await client(UploadProfilePhotoRequest(file=file))
            logger.info("ü§ñ –ù–æ–≤—ã–π –∞–≤–∞—Ç–∞—Ä –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    except FloodWaitError as e:
        logger.error(f"‚è≥ Global FloodWait: {e.seconds} —Å–µ–∫. –æ–∂–∏–¥–∞–Ω–∏—è.")
        await asyncio.sleep(e.seconds)
    except Exception as e:
        logger.exception("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –∞–≤–∞—Ç–∞—Ä–∞ –±–æ—Ç–∞:")

def main():
    parser = argparse.ArgumentParser(description="–°–º–µ–Ω–∏—Ç—å –∞–≤–∞—Ç–∞—Ä Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –±–æ—Ç–∞.")
    group = parser.add_mutually_exclusive_group()
    group.add_argument('--user', action='store_true', help='–°–º–µ–Ω–∏—Ç—å –∞–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    group.add_argument('--bot', action='store_true', help='–°–º–µ–Ω–∏—Ç—å –∞–≤–∞—Ç–∞—Ä –±–æ—Ç–∞')
    args = parser.parse_args()

    if args.user:
        asyncio.run(update_user_avatar())
    elif args.bot:
        asyncio.run(update_bot_avatar())
    else:
        # –ú–µ–Ω—é, –µ—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã
        while True:
            print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
            print("1. –ò–∑–º–µ–Ω–∏—Ç—å –∞–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            print("2. –ò–∑–º–µ–Ω–∏—Ç—å –∞–≤–∞—Ç–∞—Ä –±–æ—Ç–∞")
            print("3. –í—ã—Ö–æ–¥")
            choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–ø—Ü–∏–∏: ").strip()
            if choice == '1':
                asyncio.run(update_user_avatar())
            elif choice == '2':
                asyncio.run(update_bot_avatar())
            elif choice == '3':
                print("–í—ã—Ö–æ–¥.")
                break
            else:
                print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

if __name__ == "__main__":
    main()
